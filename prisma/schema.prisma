generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model errors {
  email  String    @db.VarChar
  error  Json      @db.Json
  date   DateTime? @default(now()) @db.Timestamp(6)
  users3 users3    @relation(fields: [email], references: [email], onDelete: NoAction, onUpdate: NoAction)

  @@ignore
}

model facebook {
  id                          Int?
  upi                         Int?
  netid                       String?                       @db.VarChar(10)
  email                       String                        @id(map: "2022_facebook_pkey") @db.VarChar(1000)
  mailbox                     String?                       @db.VarChar(1000)
  first_name                  String?                       @db.VarChar(1000)
  last_name                   String?                       @db.VarChar(1000)
  school_code                 String?                       @db.VarChar(10)
  school                      String?                       @db.VarChar(1000)
  curriculum                  String?                       @db.VarChar(1000)
  organization_code           String?                       @db.VarChar(10)
  organization                String?                       @db.VarChar(1000)
  title                       String?                       @db.VarChar(1000)
  address                     String?                       @db.VarChar(1000)
  unit_class                  String?                       @db.VarChar(1000)
  unit_code                   String?                       @db.VarChar(1000)
  unit                        String?                       @db.VarChar(1000)
  postal_address              String?                       @db.VarChar(1000)
  office_building             String?                       @db.VarChar(1000)
  cv                          String?                       @db.VarChar(1000)
  profile                     String?                       @db.VarChar(1000)
  city                        Json?                         @db.Json
  year                        Int?
  college                     String?                       @db.VarChar(1000)
  college_code                String?                       @db.VarChar(10)
  leave                       Boolean?
  eli_whitney                 Boolean?
  image                       String?                       @db.VarChar(1000)
  birthday                    String?                       @db.VarChar(10)
  major                       String?                       @db.VarChar(1000)
  phone                       String?                       @db.VarChar(1000)
  access_code                 String?                       @db.VarChar(10)
  middle_name                 String?                       @db.VarChar(1000)
  office_room                 String?                       @db.VarChar(10)
  website                     String?                       @db.VarChar(1000)
  education                   String?                       @db.VarChar(1000)
  name_recording              String?                       @db.VarChar(1000)
  pronouns                    String?                       @db.VarChar(1000)
  phonetic_name               String?                       @db.VarChar(1000)
  suffix                      String?                       @db.VarChar(1000)
  fax                         BigInt?
  city_as_point               Unsupported("geometry")?
  birth_day                   String?                       @db.VarChar
  birth_month                 String?                       @db.VarChar
  visitor                     Boolean?
  preferred_name              String?                       @db.VarChar
  place_id                    String?                       @db.VarChar
  places                      places?                       @relation(fields: [place_id], references: [place_id], onDelete: NoAction, onUpdate: NoAction)
  relationships_between_users relationships_between_users[]
  users                       users?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model feedback {
  email    String? @db.VarChar
  feedback String? @db.VarChar

  @@ignore
}

model geojson {
  request String @id
  geojson Json?  @db.Json
}

model junction_auth_email_to_user_data {
  email   String @id(map: "auth_email_to_user_data_pkey") @db.VarChar
  user_id String @db.Uuid
}

model old_user_data {
  email                      String                   @id(map: "user_data_pkey") @db.VarChar(1000)
  interests                  String?                  @db.VarChar
  expression                 String?                  @db.VarChar
  location                   Json?                    @db.Json
  university                 String?                  @db.VarChar
  city_formatted_address     String?                  @db.VarChar
  location_as_point          Unsupported("geometry")?
  full_name                  String?                  @db.VarChar
  photo                      String?                  @db.VarChar
  summer_in_new_haven        Boolean?                 @default(true)
  summer_in_new_haven_future Boolean?
  instagram                  String?                  @db.VarChar
  linkedin                   String?                  @db.VarChar
  phone                      String?                  @db.VarChar(1000)
  major                      String?                  @db.VarChar(1000)
  year                       Int?
}

model places {
  place_id       String                    @id(map: "locations_pkey") @db.VarChar
  description    String                    @db.VarChar
  created_at     DateTime?                 @default(now()) @db.Timestamptz(6)
  geog           Unsupported("geography")?
  lng            Float?                    @default(dbgenerated("st_x((geog)::geometry)"))
  lat            Float?                    @default(dbgenerated("st_y((geog)::geometry)"))
  facebook       facebook[]
  user_responses user_responses[]
}

model relationships_between_users {
  from_email String   @db.VarChar
  to_email   String   @db.VarChar
  facebook   facebook @relation(fields: [to_email], references: [email], onDelete: NoAction, onUpdate: NoAction)

  @@id([from_email, to_email], map: "relationships_between_users_pk")
  @@unique([from_email, to_email], map: "relationships_between_users_from_email_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model relationships_between_users_old {
  from_email String? @db.VarChar
  to_email   String? @db.VarChar

  @@ignore
}

model user_data_from_firebase {
  email          String   @id @db.VarChar(1000)
  uid            String?  @db.VarChar(255)
  display_name   String?  @db.VarChar
  email_verified Boolean?
  photo_url      String?  @db.VarChar
}

model user_responses {
  interests        String? @db.VarChar
  expression       String? @db.VarChar
  university       String? @db.VarChar
  instagram        String? @db.VarChar
  linkedin         String? @db.VarChar
  phone            String? @db.VarChar(1000)
  major            String? @db.VarChar(1000)
  year             Int?
  place_id         String? @db.VarChar
  user_response_id String  @id(map: "user_responses_pk") @db.VarChar(255)
  places           places? @relation(fields: [place_id], references: [place_id], onDelete: NoAction, onUpdate: NoAction)
  users            users[]
}

model users {
  email            String         @unique @db.VarChar
  email_verified   Boolean?
  full_name        String?        @db.VarChar
  name             String?        @db.VarChar
  picture          String?        @db.VarChar
  avatar_url       String?        @db.VarChar
  iss              String?        @db.VarChar
  provider_id      String?        @db.VarChar
  sub              String?        @db.VarChar
  id               String         @id(map: "users_pk") @unique(map: "user_data_from_google_auth_google_id_key") @db.Uuid
  user_response_id String         @db.VarChar(255)
  created_at       DateTime?      @default(now()) @db.Timestamptz(6)
  facebook         facebook       @relation(fields: [email], references: [email], onDelete: NoAction, onUpdate: NoAction)
  user_responses   user_responses @relation(fields: [user_response_id], references: [user_response_id], onDelete: NoAction, onUpdate: NoAction)
}

model users3 {
  id                         Int?
  upi                        Int?
  netid                      String?                  @db.VarChar(10)
  email                      String                   @id(map: "users_pkey1") @db.VarChar(1000)
  mailbox                    String?                  @db.VarChar(1000)
  first_name                 String?                  @db.VarChar(1000)
  last_name                  String?                  @db.VarChar(1000)
  school_code                String?                  @db.VarChar(10)
  school                     String?                  @db.VarChar(1000)
  curriculum                 String?                  @db.VarChar(1000)
  organization_code          String?                  @db.VarChar(10)
  organization               String?                  @db.VarChar(1000)
  title                      String?                  @db.VarChar(1000)
  address                    String?                  @db.VarChar(1000)
  unit_class                 String?                  @db.VarChar(1000)
  unit_code                  String?                  @db.VarChar(1000)
  unit                       String?                  @db.VarChar(1000)
  postal_address             String?                  @db.VarChar(1000)
  office_building            String?                  @db.VarChar(1000)
  cv                         String?                  @db.VarChar(1000)
  profile                    String?                  @db.VarChar(1000)
  city                       Json?                    @db.Json
  year                       Int?
  college                    String?                  @db.VarChar(1000)
  college_code               String?                  @db.VarChar(10)
  leave                      Boolean?
  eli_whitney                Boolean?
  image                      String?                  @db.VarChar(1000)
  birthday                   String?                  @db.VarChar(10)
  major                      String?                  @db.VarChar(1000)
  phone                      String?                  @db.VarChar(1000)
  access_code                String?                  @db.VarChar(10)
  middle_name                String?                  @db.VarChar(1000)
  office_room                String?                  @db.VarChar(10)
  website                    String?                  @db.VarChar(1000)
  education                  String?                  @db.VarChar(1000)
  name_recording             String?                  @db.VarChar(1000)
  pronouns                   String?                  @db.VarChar(1000)
  phonetic_name              String?                  @db.VarChar(1000)
  suffix                     String?                  @db.VarChar(1000)
  fax                        BigInt?
  city_as_point              Unsupported("geometry")?
  uid                        String?                  @db.VarChar(255)
  display_name               String?                  @db.VarChar
  email_verified             Boolean?
  photo_url                  String?                  @db.VarChar
  interests                  String?                  @db.VarChar
  expression                 String?                  @db.VarChar
  location                   Json?                    @db.Json
  university                 String?                  @db.VarChar
  city_formatted_address     String?                  @default(dbgenerated("(city ->> 'formatted_address'::text)")) @db.VarChar
  location_as_point          Unsupported("geometry")? @default(dbgenerated("st_setsrid(st_makepoint((((location ->> 'longitude'::text))::numeric)::double precision, (((location ->> 'latitude'::text))::numeric)::double precision), 4326)"))
  full_name                  String?                  @default(dbgenerated("COALESCE(display_name, (\nCASE\n    WHEN (first_name IS NULL) THEN (last_name)::text\n    WHEN (last_name IS NULL) THEN (first_name)::text\n    ELSE (((first_name)::text || ' '::text) || (last_name)::text)\nEND)::character varying)")) @db.VarChar
  photo                      String?                  @default(dbgenerated("COALESCE(photo_url, image)")) @db.VarChar
  summer_in_new_haven        Boolean?
  summer_in_new_haven_future Boolean?
  instagram                  String?                  @db.VarChar
  linkedin                   String?                  @db.VarChar
  errors                     errors[]                 @ignore
}

model users_from_yale_facebook_new {
  id                Int?
  upi               Int?
  netid             String?                  @db.VarChar(10)
  email             String                   @id @db.VarChar(1000)
  mailbox           String?                  @db.VarChar(1000)
  first_name        String?                  @db.VarChar(1000)
  last_name         String?                  @db.VarChar(1000)
  school_code       String?                  @db.VarChar(10)
  school            String?                  @db.VarChar(1000)
  curriculum        String?                  @db.VarChar(1000)
  organization_code String?                  @db.VarChar(10)
  organization      String?                  @db.VarChar(1000)
  title             String?                  @db.VarChar(1000)
  address           String?                  @db.VarChar(1000)
  unit_class        String?                  @db.VarChar(1000)
  unit_code         String?                  @db.VarChar(1000)
  unit              String?                  @db.VarChar(1000)
  postal_address    String?                  @db.VarChar(1000)
  office_building   String?                  @db.VarChar(1000)
  cv                String?                  @db.VarChar(1000)
  profile           String?                  @db.VarChar(1000)
  city              Json?                    @db.Json
  year              Int?
  college           String?                  @db.VarChar(1000)
  college_code      String?                  @db.VarChar(10)
  leave             Boolean?
  eli_whitney       Boolean?
  image             String?                  @db.VarChar(1000)
  birthday          String?                  @db.VarChar(10)
  major             String?                  @db.VarChar(1000)
  phone             String?                  @db.VarChar(1000)
  access_code       String?                  @db.VarChar(10)
  middle_name       String?                  @db.VarChar(1000)
  office_room       String?                  @db.VarChar(10)
  website           String?                  @db.VarChar(1000)
  education         String?                  @db.VarChar(1000)
  name_recording    String?                  @db.VarChar(1000)
  pronouns          String?                  @db.VarChar(1000)
  phonetic_name     String?                  @db.VarChar(1000)
  suffix            String?                  @db.VarChar(1000)
  fax               BigInt?
  city_as_point     Unsupported("geometry")?
  birth_day         String?                  @db.VarChar
  birth_month       String?                  @db.VarChar
  visitor           Boolean?
}

model users_times_available {
  email String   @id @db.VarChar
  start DateTime @default(now()) @db.Timestamp(6)
  end   DateTime @db.Timestamp(6)
  plans String?  @db.VarChar
}

enum continents {
  Africa
  Antarctica
  Asia
  Europe
  Oceania
  North_America @map("North America")
  South_America @map("South America")
}

enum user_status {
  ONLINE
  OFFLINE
}
